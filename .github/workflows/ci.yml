name: CI

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

env:
    CARGO_TERM_COLOR: always

jobs:
    test:
        name: Test on ${{ matrix.os }}
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]
                rust: [stable]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Install Rust
              uses: dtolnay/rust-toolchain@stable
              with:
                  toolchain: ${{ matrix.rust }}
                  components: rustfmt, clippy

            - name: Cache cargo registry
              uses: actions/cache@v3
              with:
                  path: ~/.cargo/registry
                  key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-cargo-registry-

            - name: Cache cargo index
              uses: actions/cache@v3
              with:
                  path: ~/.cargo/git
                  key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-cargo-git-

            - name: Cache cargo build
              uses: actions/cache@v3
              with:
                  path: target
                  key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-cargo-build-target-

            - name: Install nextest
              uses: taiki-e/install-action@nextest

            - name: Run tests with nextest
              run: cargo nextest run --all-features

            - name: Run doc tests
              run: cargo test --doc

    fmt:
        name: Format Check
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Install Rust
              uses: dtolnay/rust-toolchain@stable
              with:
                  components: rustfmt

            - name: Check formatting
              run: cargo fmt --all -- --check

    clippy:
        name: Clippy Check
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Install Rust
              uses: dtolnay/rust-toolchain@stable
              with:
                  components: clippy

            - name: Run clippy
              run: cargo clippy --all-targets --all-features -- -D warnings

    build:
        name: Build Check
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Install Rust
              uses: dtolnay/rust-toolchain@stable

            - name: Build
              run: cargo build --release --all-features

    coverage:
        name: Code Coverage
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Install Rust
              uses: dtolnay/rust-toolchain@stable

            - name: Install tarpaulin
              run: cargo install cargo-tarpaulin

            - name: Generate coverage
              run: cargo tarpaulin --out xml --all-features

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v3
              with:
                  files: ./cobertura.xml
                  fail_ci_if_error: false
